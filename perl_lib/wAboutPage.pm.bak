####################
## wAboutPage.pm
####################
##
## Help, history, etc.
##
###########################################################################
# This code is part of wITIP (a web based Information Theoretic Prover)
#
# Copyright (2017) Laszlo Csirmaz, Central European University, Budapest
# This program is free, open-source software. You may redistribute it
# and/or modify under the terms of the GNU General Public License (GPL).
# There is ABSOLUTELY NO WARRANTY, use at your own risk.
###########################################################################
=pod

=head1 wAboutPage.pm

Description and help of wITIP.

=head2 Procedures

=over 2

=item wAboutPage::Page($session)

Render the wITIP help page.

=item render_block($session,$anchor,$title,$text)

Internal procedure which renders a topic. $anchor is the internal link name
(id) of the topic without the leading letter w. $title is the title of
the section, finally $text is the text. In the text the following styling
can be used:

    L%<anchor>%<anchor text>%

to form and internal link; <anchor> is the internal link name without the
leading w; <anchor text> is the text which is presented.

    S%<complete style>#<simple style>%

styles code depending on the configured style. If the second part starting
with # is missing, the whole text is printed as a code. If both parts are
present, the first part is printed when the complete style is in effect,
the second part for simple style (and commas are replaced by the current
separator charater).

    <div class="indent"> ... </div>   

renders an indented  paragraph.

=item render_link($anchor,$text)

Internal procedure to render an internal link.

=item render_sample($session,$code)

Internal procedure which renders a sample code.

=back

=cut
###########################################################################

package wAboutPage;

use wHtml;
use strict;

my $seeas="<span class=\"seeas\">-&rsaquo;</span>"; # ->
my $seeas2="";

sub render_link {
    my($to,$text)=@_;
    return "<a href=\"#w$to\">$seeas$text</a>";
}
sub render_sample {
    my($session,$sample)=@_;
    if($sample =~ /^(.+)#(.+)$/){
       my($s1,$s2)=($1,$2);
       if($session->getconf("style")){ # simple style
          $sample=$s2;
          $sample =~ s/,/$session->getconf("sepchar")/ge;
       } else { # traditional style
          $sample=$s1;
       }
    }
    return "<span class=\"samplecode\">$sample</span>";
}

sub render_block {
    my($session,$ref,$title,$block)=@_;
    print "<div class=\"textblock\">\n",
      "<h2 id=\"w$ref\">$title</h2>\n";
    $block =~ s/L%([^%]+)%([^%]+)%/render_link($1,$2)/ge;
    $block =~ s/S%([^%]+)%/render_sample($session,$1)/ge;
    print $block;
    print "</div>\n";
}

# use L%<linkname>%<linktext>% for internal link to another topic
# and S%<full style>#<simple style>% for sample text

sub Page {
    my($session)=@_;
    wHtml::plain_header($session,"wITIP about", {
        lcss   => "about",
        banner => "wITIP",
        bodyattr => "onload=\"wi_onresize();\"",
        javascript => "
function wi_onresize(){
 var ht=Math.max(window.innerHeight, document.documentElement.clientHeight);
 if(ht>220)
   document.getElementById('leftblock').style.height= (ht-150)+'px';
}
window.onresize=wi_onresize;
function wi_showHelp(topic){
   alert('showing '+topic);
}
",
    });
    my $B="<span style=\"font-family: monospace; font-size: 1em;\">";
    my $E="</span>";
    print "<div style=\"height: 2px;\"> <!-- spacer --> </div>\n";
    print "<div class=\"main\">\n",
      "<table class=\"helptable\"><tbody><tr>\n";
    # legend
    print <<LEGEND;
<td class="legend">
<div class="ltitle">wITIP</div>
<ul>
<li>$seeas2<a href="#wabout">about</a></li></ul>
<div class="ltitle">Syntax</div>
<ul>
<li>$seeas2<a href="#wstyle">style</a></li>
<li>$seeas2<a href="#wvar">variables</a></li>
<li>$seeas2<a href="#wsequences">sequences</a></li>
<li>$seeas2<a href="#wentropy">entropy</a></li>
<li>$seeas2<a href="#wexpr">expression</a></li>
<li>$seeas2<a href="#wingleton">Ingleton</a></li>
<li>$seeas2<a href="#wmacros">macros</a></li>
<li>$seeas2<a href="#wconstr">constraints</a></li>
</ul>
<div class="ltitle">Checking</div>
<ul>
<li>$seeas2<a href="#wcheck">checking</a></li>
<li>$seeas2<a href="#wunroll">unrolling</a></li>
</ul>
<div class="ltitle">Session</div>
<ul>
<li>$seeas2<a href="#wconfigure">configure</a></li>
<li>$seeas2<a href="#wsave">print, save</a></li>
</ul>
<div class="ltitle">Other</div>
<ul>
<li>$seeas2<a href="#wmethod">method</a></li>
<li>$seeas2<a href="#whistory">history</a></li>
<li>$seeas2<a href="#wcopyright">author</a></li>
</ul>
</td>
LEGEND
    # content
    print "<td class=\"content\">\n",
      "<div class=\"left\" id=\"leftblock\">\n";
##################################################################
# ABOUT
    render_block($session,"about","About wITIP",<<BLOCK);
wITIP is a web based <b>I</b>nformation <b>T</b>heoretic <b>I</b>nequality 
<b>P</b>rover.
Linear entropy inequalities can be checked for validity, which means
whether the inequality is a consequence of the basic Shannon 
inequalities and the specified constraints.
<br>
wITIP uses extended syntax to enter expressions, a user friendly 
syntax checker, macro facility, and &quot;unrolling&quot; possibility
where complex entropy expressions are unrolled into a linear combination
of simple entropies.
<br>
To check an L%expr%entropy expression% for L%method%validity%, type it to the box
at the bottom of the &quot;check&quot; page:

<div class="indent">
  S%+1.234*H(X|Y)-12.234*I(A;B|H)&lt;=-2H(B,X,Y)#+1.234*(x|y)-12.234*(a,b|h)&lt;=-2bxy%
</div>

You can add L%constr%constraints% so that expressions are checked assuming
all constraints are true. The first one says that the variables form a Markov chain;
the second one that the variables are completely independent; the third one is a
conditional independence.

<div class="indent">
  S%Alpha -> Beta -> Gamma -> Delta# a -> b -> x -> y%<br>
  S%W1 || X || Y#u || v || w%<br>
  S%I(A;B|X,Y)=0#(a,b|xy)=0%
</div>

L%macros%Macros% are shorthands for entropy expressions; the macro below defines
the conditional Ingleton expression:

<div class="indent">
  S%D(A;B;C;D|E)=[AE,BE,CE,DE]#D(a,b,c,d|e)=[ae,be,ce,de]%
</div>

The macro can be used in expressions, a possible invocation is 
S%D(A1,X;A2,Y;C;D|Z1,Z2)#D(ax,by,c,d|vw)%.
<br>
For additional general information see the description of the
L%method%applied method%, the L%history%history%, and the 
L%copyright%copyright% information.
<p></p>
BLOCK
########################################################################
# STYLE
    render_block($session,"style","Syntax style",<<SYNTAX_STYLE);

Entropy expressions can be entered using two different styles: either
<i>traditional</i> or <i>simplified</i>.  The traditional style follows the
style of the L%history%original ITIP software% created by Raymond W.  Yeung
and Ying-On Yan: random variables are identifiers, such as S%Winter% or
S%var_002%; variables in a list are separated by commas, and basic
information measures are entered in textbook style, such as
S%I(Winter,Spring;Fall|var_01)% denoting the conditional joint information
of S%Winter,Spring% and S%Fall% conditioned on S%var_01%.

<br>

Simplified style simplifies and speeds up entering queries.  Random
variables are restricted to lower case letters only (but see the description
of how L%var%random variables% are entered); variables are simply put next
to each other to denote their joint distribution; and basic information
measures are recognized without the letters S%H% or S%I%.  Thus S%(ax,by)%
is the joint information of the random variable pairs S%a,x% and S%b,y%.

<br>

The following two examples ask the validity of identical entropy
expressions; the first one is entered in traditional style, the second one
using simplified style. The first term in both queries is the 
L%ingleton%Ingleton expression%.

<div class="indent">
S%[A;B;X;Y]+I(Z;B|X)+I(Z;X|B)+I(B;X|Z) >= -3*I(Z,A;Y|B,X)%<br>
S%[a,b,c,d]+(e,b|c)+(e,c|b)+(b,c|e) >= -3*(ea,d|bc)%
</div>

Simplified style can be chosen by ticking the &quot;use simplified
syntax&quot; box in the L%configure%wITIP configuration%.  At the same place
other options can be set which changes how entropy expressions are parsed. 
Changing the style does not affect existing macros and constraints as their
internal representation is independent of the style.  However random
variables used in constraints might not be available anymore.

<p></p>

See the description of L%var%random variables% and L%sequences%variable
sequences% for more information.

<p></p>

<b>The examples are presented in the chosen style with the chosen
list separating characters.</b> To see the examples with other style
parameters, please change them in L%configure%wITIP configuration%.

<p></p>
SYNTAX_STYLE
#####################################################################
# VARIABLES
    render_block($session,"var","Random variables",<<RANDOM_VARS);
Using <i>traditional</i> style, random variables are arbitrary identifiers, 
that is 
Random variables and sequences of variables can be entered using two
different styles: either <i>traditional</i>, or <i>simplified</i>.<br>
In <i>traditional</i> style arbitrary identifier consisting of letters
and digits can denote a random variable, such as S%Winter% or
S%var_002%. This notation is similar to the one used in textbooks
where random variables are typically denoted by single capital letter
optionally followed by an index: S%A% or S%X_32%.<br>
The <i>simplified</i> style restricts how random variables can be
written &ndash; typically to a single lower case letter &ndash; 
but it lets enter complex entropy expressions in a more succint way.
<p></p>
What sequences are allowed as random variables can be set in the 
L%configure%wITIP configuration%. Random variables can end with a
sequence primes such as in S%a'% or S%a''%.
<p></p>
RANDOM_VARS
#####################################################################
# SEQUENCES
    render_block($session,"sequences","Sequence of random variables",<<SEQUENCE);
The joint distribution of several random variables is denoted by
listing all individual variables next to each other. In <i>
traditional</i> style the variables are separated by commas as in
S%Spring,Summer, Winter, Fall%. In <i>simplified</i> style simply
write the variables next to each other, even without spaces; in this
style  both S%a b c% and S%abc% denotes the joint distribution of
the three variables S%a%, S%b%, and S%c%.
<p></p>
SEQUENCE
#####################################################################
# ENTROPY
    render_block($session,"entropy","Entropy",<<ENTROPY);
The entropy of the joint distribution of variables is denoted the
usual way as in S%H(Spring,Summer,Fall)#H(abx)%, the letter S%H% is
followed by a L%sequences%list of random variables% enclosed in
parentheses.
<br>
Other standard information measures, namely conditional entropy, mutual
information and conditional mutual information can be written as well:
<ul><li>S%H(Spring | Summer)#H(a|x)% &ndash; conditional entropy,</li>
<li>S%I(A;B)#I(a,b)% &ndash; mutual information,</li>
<li>S%I(A;B|X)#I(a,b|x)% &ndash; conditional mutual information.</li>
</ul>
In <i>simplified</i> style these information measures can be further
simplified. A variable sequence stands for its own entropy; conditional
entropy and mutual information can be written without the leading letter
S%H% and S%I%.
<ul><li>S%ab% &ndash; the entropy of the variable pair S%a% and S%b%,</li>
<li>S%(ab|cd)% &ndash; conditional entropy, in standard style written as
S%(H(a,b|c,d)%.
<li>S%(ab,cd)#(ab,cd)% mutual information, same as S%I(ab,cd)#I(ab,cd)%
(observe that S%ab% is the joint distribution of variables S%a% and S%b%),</li>
<li>S%(ab,cd|xy)#(ab,cd|xy)% conditional mutual information, same as
S%I(ab,cd|xy)#I(ab,cd|xy)%.
</ul>
<p></p>
ENTROPY
#####################################################################
# INGLETON
    render_block($session,"ingleton","Ingleton expression",<<INGLETON);
The <i>Ingleton expression</i> plays an important role in Information
Theory. wITIP uses a special syntax for this expression:
<div class="indent">
S%[A;B;X;Y]#[a,b,x,y]% is an abbreviation for<br>
&nbsp; &nbsp; S%-I(A;B)+I(A;B|X)+I(A;B|Y)+I(X;Y)#-I(a,b)+I(a,b|x)+I(a,b|y)+I(x,y)%;
</div>
there should be four L%sequences%variable sequences% inside the square
brackets.
<p></p>
INGLETON
#####################################################################
# EXPRESSIONS
    render_block($session,"expr","Entropy expression",<<EXPRESSION);
An <i>entropy expression</i> is a linear combination of 
L%entropy%entropy measures%, L%ingleton%Ingleton expression%,
and L%macros%macro invocations%. An example is
<div class="indent">
S%-1.234*H(X|Y) - 12.345I(A;B|H) + 3X(X;B|A,Y)#-1.234*(x|y) - 12.345(a,b|h) + 3X(x,b|ay)%
</div>
where S%X(;|)#X(,|)% is a L%macros%macro%. The S%*% sign between the
constant and the entropy term is optional and can be omitted.
<p></p>
EXPRESSION
#####################################################################
# MACROS
    render_block($session,"macros","Macros",<<MACROS);
Next to standard information measures and the L%ingleton%Ingleton expression%, 
an L%expr%entropy expression% can also contain <i>macro invocations</i>.
Actually, a macro is a shorthand for a linear combination of 
<p></p>
MACROS
#####################################################################
# CONSTRAINTS
    render_block($session,"constr","Constraints",<<CONSTR);
Checking the L%method%validity% of an entropy expression is done
relative to a set of <i>constraints</i>.
CONSTR
#####################################################################
# CHECKING
    render_block($session,"check","Checking expressions",<<CHECKING);
Checking the L%method%validity% of an entropy expression is done
relative to a set of <i>constraints</i>.
CHECKING
#####################################################################
# CHECKING
    render_block($session,"unroll","Unrolling",<<UNROLL);
What &quot;unroll&quot; means?
Checking the L%method%validity% of an entropy expression is done
relative to a set of <i>constraints</i>.
UNROLL
#####################################################################
# CONFIGURE
    render_block($session,"configure","Configuring wITIP",<<CONFIGURE);
What can you configure? How can it be done?
Be careful when changing any style option.
Checking the L%method%validity% of an entropy expression is done
relative to a set of <i>constraints</i>.
CONFIGURE
#####################################################################
# PRINTING, SAVING
    render_block($session,"save","Printing and saving your work",<<PRINTING);
The <i>session</i> determines your present working status.
You can print, save, an load.
What can you configure? How can it be done?
Checking the L%method%validity% of an entropy expression is done
relative to a set of <i>constraints</i>.
PRINTING
#####################################################################
# METHOD
    render_block($session,"method","Under the hood: how wITIP works?",<<METHOD);
wITIP transforms the question of the validity of the entered query
into a satisfiablilty of an LP problem.
What can you configure? How can it be done?
Checking the L%method%validity% of an entropy expression is done
relative to a set of <i>constraints</i>.
METHOD
#####################################################################
# HISTORY
    render_block($session,"history","History",<<HISTORY);
wITIP transforms the question of the validity of the entered query
into a satisfiablilty of an LP problem.
What can you configure? How can it be done?
Checking the L%method%validity% of an entropy expression is done
relative to a set of <i>constraints</i>.
HISTORY
#####################################################################
# COPYRIGHT
    render_block($session,"copyright","Author",<<COPYRIGHT);
wITIP transforms the question of the validity of the entered query
into a satisfiablilty of an LP problem.
What can you configure? How can it be done?
Checking the L%method%validity% of an entropy expression is done
relative to a set of <i>constraints</i>.
COPYRIGHT
    print "</div><!-- leftblock -->\n",
      "</td></tr></tbody></table>\n";
    print "</div><!-- main -->\n";

    wHtml::html_tail();
}

1;
