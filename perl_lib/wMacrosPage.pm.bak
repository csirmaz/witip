####################
## wMacrosPage.pm
####################
##
## Add, delete, edit, list macros
##
###########################################################################
# This code is part of wITIP (a web basex Information Theoretic Prover)
#
# Copyright (2017) Laszlo Csirmaz, Central European University, Budapest
# This program is free, open-source software. You may redistribute it
# and/or modify under the terms of the GNU General Public License (GPL).
# There is ABSOLUTELY NO WARRANTY, use at your own risk.
###########################################################################

package wMacrosPage;

use wHtml;
use wUtils;
use strict;

#######################################################
=pod

=head1 wMacrosPage.pm

=over 2

=item wMacrosPage::Page($session)

Render the main macros page: banner; hidden delete buttons; list of macros; 
and add a new macro.

Delete buttons: "delete marked macros", "cancel", "delete all macros". They
are shown only when one of the "delete" icons in the macro list are clicked. 
It sets bit 1 in the js variable witipAllDisabled to prevent any other action.

List of macros: each macro occupies a single line numbered from 1. Macros 
have a (hidden) label; "delete" checkbox; and the macro's raw (original)
text. The macros are in a scrollable table which automatically scrolls to the bottom.
Clicking on a macro text copies the raw text to the editing part.

Macro editing: The "add macro" button is on the left followed by the edit
field.  This field is actually two identical textarea on top of each other. 
The bottom one is slided down by two pixels and is used to show the error
position by printing sufficiently many underscore.  This content is erased
after any keystroke in the editing field.  Keystrokes Up, Down, and Enter
are captured.  Up and Down gives the previous and following history entry;
Enter submits the given string using an ajax request, equivalent to pushing
the "add macro" button.  With no errors, the ajax responder reloads the page
with the new set of macros and history.  Until the response to the ajax
request arrives, bit 2 of js variable witipAllDisabled is set to prevent
fireing further requests.  Two additional lines in the macro editing box are
reserved for error messages and auxiliary error text.

The history (Up and Down keys) works as follows.  The History[] array is
requested by an ajax request; util it arrives, Up and Down arrows are
disabled.  Pressing any key except for Up and Down sets the history pointer
to zero.  When the Up key is pressed, the pointer is increased by one, and
the content of History[pointer] is copied to the editing field.  When the
pointer was zero, first the content of the editing field is copied to
History[0].  The Down key does nothing if the pointer is zero, otherwise
decreases the pointer, and copies History[pointer] to the editing field. 
When a macro text is copied to the editing field and the history pointer is
zero, then the original content of the editing field is copied to
History[0], and the pointer is set to 1 (so pressing Down immediately
retrieves the original content).

Replacing is done by clicking on the macro text, it copies to the editing
field.  Then delete the macro; after reloading the page both the content of
the editing field and the caret position is preserved.


=item wMacrosPage::Parse($session)

Clean up when the macro page is closed (save the editing line to history).

=back

=cut
#######################################################

sub render_macroline {
    my($session,$n,$label,$text)=@_;
## HTML code:
## <tr class="macroline" id="mac:$n:0">
##   <td class="macrono"> $n </td>
##   <td class="macrodel">
##     <checkbox name="mdel:$label" id="mdel:$n"></td>
##   <td class="macrotext">
##     <div data-macro="TEXT" id="mac:$n:1"
##        onclick="copyLineToEdit(this)">TEXT</div></td>
## </tr>
    my $etext=wUtils::htmlescape($text);
    print "<tr class=\"macroline\" id=\"mac:$n:0\">\n";
    print "<td class=\"macrono\">$n</td>\n";
    print "<td class=\"macrodel\" title=\"delete\"><div class=\"innermdel\">",
       "<input type=\"checkbox\" name=\"mdel:$label\" id=\"mdel:$n\"",
       " onchange=\"macrodel(this);\" title=\"delete\">",
       "<label for=\"mdel:$n\"></label></div></td>\n";
    print "<td class=\"macrotext\"><div class=\"innermtext\" ",
       "id=\"mac:$n:1\" style=\"font-family: ", $session->getconf("font"),
       "; font-size: ",$session->getconf("fontsize"),"pt;\"" ,
       " title=\"click to edit\" data-macro=\"$etext\"",
       " onclick=\"copyLineToEdit(this);\">",
       $etext,"</div></td>\n";
}

sub Page {
    my($session)=@_;
    my $img=$session->getconf("basehtml")."/images";
    my $SSID=$session->{SSID};
    # these background images have configurable URI's
    wHtml::plain_header($session,"macros", {
        lcss    => "macros",
        style   => "
.innermdel label {background-image: url(\"$img/kuka2.png\") }
.innermdel input:checked + label { background-image: url(\"$img/kuka3.png\") }
",
        banner  => "macros",
        ljs     => ["MacroPage","History","Ajax"],
        bodyattr => "onload=\"initPage();\"",
    });
    # spacer
    print "<div style=\"height: 5px\"> <!-- spacer --> </div>\n";
########################
print "<p style=\"margin:0; padding:0;\"> action=[",$session->{action},"]<br>
           comingfrom=[",$session->getpar("comingfrom"),"]<br>\n";
if($session->getpar("comingfrom") eq "macros"){
    print "delall => [",$session->getpar("delall"),"], ",
          "deletemarked => [",$session->getpar("deletemarked"),"]<br>\n";
    print "mdel fields: ";
    foreach my $k(keys %{$session->{pars}}){
        next if($k !~ /^mdel:.+$/);
        print "$k = [",$session->getpar($k),"] ";
    }
    print "<br>textinput content: [",$session->getpar("macro:input"),"]\n";
}
print "</p>\n";
########################
    # delete / delete all / cancel buttons
## HTML code
## <div><table><tbody><tr>
##   <td><input submit delete marked></td>
##   <td><input submit cancel onclick="resetdel()"></td>
##   <td><input submit delete all onclick="deleteall()"></td>
## </tr></tbody></table></div>
    print "<div class=\"action\" id=\"delmarked\">",
       "<table><tbody><tr><td class=\"delsubmit\">",
       "<input type=\"submit\" name=\"deletemarked\" value=\"delete marked macros\">",
       "</td>\n",
       "<td class=\"cancel\"><input type=\"submit\" name=\"cancel\" value=\"cancel\"",
       " onclick=\"return resetdel()\"></td>\n",
       "<td class=\"delall\"><input type=\"submit\" name=\"delall\"",
       " value=\"delete all macros\" onclick=\"return deleteall();\"></td>\n",
       "</tr></tbody></table></div>\n";
    # the table of macros; this table can be empty
## HTML code
## <div><table><tbody>
##    <tr>...macroline...</tr>
## </tbody></table></div>
    print "<div class=\"macrocontainer\"><table class=\"macros\">",
          "<tbody id=\"macrotable\">";
    # render all macros, or say that there are no macros yet ...
    render_macroline($session,1,'ma1',"D(a,b,c)=(a,b|c)+(b,c|a)+(c,a|b)");
    render_macroline($session,2,'ma9',"H(a;x|t)=H(a)+I(a;x|t)+345*{H(t;x|a)+D(a;t;x)+I(a,b|d)+I(b,d|a)+X(x,y,z)-17*H(ab|cd)}");
    render_macroline($session,3,'ma23',"H(a',b',c'')=U(c''|b'a')");
    render_macroline($session,4,'ma7',"D(a,b,c)=(a,b|c)+(b,c|a)+(c,a|b)");
    render_macroline($session,5,'maa',"H(a;x|t)=H(a)+I(a;x|t)+345*{H(t;x|a)+D(a;t;x)+I(a,b|d)+I(b,d|a)+X(x,y,z)-17*H(ab|cd)}");
    render_macroline($session,6,'mab3',"H(a',b',c'')=U(c''|b'a')");
    render_macroline($session,7,'mac1',"D(a,b,c)=(a,b|c)+(b,c|a)+(c,a|b)");
    render_macroline($session,8,'mad9',"H(a;x|t)=H(a)+I(a;x|t)+345*{H(t;x|a)+D(a;t;x)+I(a,b|d)+I(b,d|a)+X(x,y,z)-17*H(ab|cd)}");
    render_macroline($session,9,'mae23',"H(a',b',c'')=U(c''|b'a')");
    render_macroline($session,10,'maf1',"D(a,b,c)=(a,b|c)+(b,c|a)+(c,a|b)");
    render_macroline($session,11,'mag9',"H(a;x|t)=H(a)+I(a;x|t)+345*{H(t;x|a)+D(a;t;x)+I(a,b|d)+I(b,d|a)+X(x,y,z)-17*H(ab|cd)}");
    render_macroline($session,12,'mah23',"H(a',b',c'')=U(c''|b'a')");
    render_macroline($session,13,'mai1',"D(a,b,c)=(a,b|c)+(b,c|a)+(c,a|b)");
    render_macroline($session,14,'maj9',"H(a;x|t)=H(a)+I(a;x|t)+345*{H(t;x|a)+D(a;t;x)+I(a,b|d)+I(b,d|a)+X(x,y,z)-17*H(ab|cd)}");
    render_macroline($session,15,'mak23',"H(a',b',c'')=U(c''|b'a')");
    render_macroline($session,16,'mac1',"D(a,b,c)=(a,b|c)+(b,c|a)+(c,a|b)");
    render_macroline($session,17,'mad',"H(a;x|t)=H(a)+I(a;x|t)+345*{H(t;x|a)+D(a;t;x)+I(a,b|d)+I(b,d|a)+X(x,y,z)-17*H(ab|cd)}");
    render_macroline($session,18,'maf23',"H(a',b',c'')=U(c''|b'a')");
    
    print "</tbody></table></div>\n";
    # editing 
## HTML code
## <div><table>tbody><tr>
##   <td><select> replace / add new </select></td>
##   <td>
#     <div><textarea macro:input oninput="autoresize(this)"
##          onkeydown="keydown(event)">...</textarea>
##         <textarea macro:shadow>----^</textarea></div>    
##    <div> Error message </div>
##    <div> auxiliary message </div></td>
##   <td><input submit onclick="addMacro(this)"></td>
## </tr></tbody></table></div>
    my $inpcontent= $session->getpar("macro:input") || "Editable... 45678901234567890";
    my $errpos = "_______________";
    my $errmsg = "Error message (if any) comes here.";
    my $auxmsg = "a+3b+c >=0 -- auxline (if any)";

    print "<div class=\"edit\">\n";
    print "<table><tbody><tr><td class=\"method\">";
    print "<select name=\"addas\" id=\"addas\">\n";
## go over all macros; the option's value should be its label
    for my $i(1..18){ print "<option value=\"$i\">replace \#$i</option>\n" }
##
    print "<option value=\"0\" selected=\"selected\">add as new</option>\n";
    print "</select></td>\n<td class=\"editline\">";
    print "<div class=\"dblinput\" id=\"iddblinput\">";
    print "<textarea class=\"inputmain\" id=\"macro:input\" name=\"macro:input\"",
      " oninput=\"autoresize(this);\"",
      " style=\"font-family: ",$session->getconf("font"),
      "; font-size: ",$session->getconf("fontsize"),"pt;\"",
      " onkeydown=\"editkey(event);\"",
      " autocomplete=\"off\" spellcheck=\"false\">$inpcontent</textarea>";
    print "<textarea class=\"inputshadow\" id=\"macro:shadow\" name=\"macro:shadow\"",
      " style=\"font-family: ",$session->getconf("font"),
      "; font-size: ",$session->getconf("fontsize"),"pt;\"",
      " autocomplete=\"off\">$errpos</textarea>";
    print "</div><!-- dblinput -->";
    print "<div class=\"errmsg\" id=\"macro:errmsg\">$errmsg</div>\n";
    print "<div class=\"erraux\" id=\"macro:auxmsg\" style=\"font-family: ",$session->getconf("font"),
      "; font-size: ",$session->getconf("fontsize"),"pt;\">";
    print $auxmsg;
    print "</div>";
    print "</td>\n<td class=\"editsubmit\">";
    print "<input type=\"submit\" name=\"checkinput\" value=\"add macro\"";
    print " onclick=\"return addMacro();\"";
    print " title=\"hit Enter to add the macro\">";
    print "</td>\n";
    print "</tr></tbody></table>";
    print "</div><!-- edit -->\n";
        
    wHtml::html_tail();
}

##
sub Parse {
    my($session)=@_;
    return if($session->getpar("comingfrom") ne "macros");
    if($session->getpar("delall") || $session->getpar("deletemarked")){
        my @labels=();
        foreach my $k(keys %{$session->{pars}}){
           push @labels,$1 if($k =~ /^mdel:(.+)$/);
        }
        # delete all macros with labels in the @label array
        return;
    }
    # save the content of "macro:input" to be returned next time ???
}

1;

